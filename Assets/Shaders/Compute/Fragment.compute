// Each #kernel tells which function to compile; you can have many kernels
#pragma kernel CSMain

#include "noiseSimplex.cginc"

uint Width, Height;
float FragOffset1;
float FragOffset2;
float4 ViewDir; 
float4 LightDir; 
float Time;
StructuredBuffer<float> ZBuffer;
RWTexture2D<float4> Screen;
StructuredBuffer<float3> Normals;
StructuredBuffer<float2> UVs;

float3x3 AngleAxis3x3(float angle, float3 axis)
{
    float c, s;
    sincos(angle, s, c);

    float t = 1 - c;
    float x = axis.x;
    float y = axis.y;
    float z = axis.z;

    return float3x3(
        t * x * x + c,      t * x * y - s * z,  t * x * z + s * y,
        t * x * y + s * z,  t * y * y + c,      t * y * z - s * x,
        t * x * z - s * y,  t * y * z + s * x,  t * z * z + c
    );
}

[numthreads(32, 1, 1)]
void CSMain(uint3 id : SV_DispatchThreadID)
{
	uint i = id.x;

	if (ZBuffer[i] < 100000.0f) {
		int x = i % Width;
		int y = i / Width;

		float3 n = -Normals[i];
		normalize(n);

		float3 pix = .3f * float3(x / 20.0f, y / 20.0f, ZBuffer[i]);
		float noise = snoise(float4(pix, 1));

		noise = 1;

		// scales normal by noise, looks cool but flat
		//n *= FragOffset1 * noise;


		n = mul(n, AngleAxis3x3(FragOffset1 * noise, float3(1,0,0)));

		float2 uv = UVs[i];

		float4 col = float4(uv.x, uv.y, 1, 1);

		float val = dot(n, ViewDir.xyz);

		col.r *= (1 - val);
		col.g *= 1 - n.y;
		col.b = sin(val);

		//col.b = sin(val);
		//col.a = 1;

		//col.r *= Offset;
		//col.g *= 1 + (sin((FragOffset2 * (float)x)) + cos((FragOffset2 * (float)y)));

		// either of these look good but not together
		//col.b += tan(FragOffset2 * (100*n.y));
		col.g += sin(FragOffset2 * (100*n.y));

		Screen[uint2(x, y)] = col;
	}
}